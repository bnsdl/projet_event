<?xml version="1.0" encoding="UTF-8"?>

<project name="event" default="build">
    <property name="workspace" value="${basedir}" />
    <property name="sourcedir" value="${basedir}/src" />
    <property name="builddir" value="${workspace}/app/build/" />
    <!--<property name="toolsdir" value="${basedir}/vendor/bin/" />-->

    <target name="build"
            depends="prepare,vendors,parameters,lint,phploc-ci,pdepend,phpcpd,phpmd-ci,phpcs-ci"/>
    <!--<target name="build" depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox" description=""/>-->
    <target name="build-parallel" depends="prepare,lint,tools-parallel"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <!--<antcall target="phpdoc"/>-->
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artif@acts">
        <delete dir="${builddir}/api"/>
        <!--<delete dir="${builddir}/code-browser"/>-->
        <!--<delete dir="${builddir}/coverage"/>-->
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/docs/*"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <!--<mkdir dir="${builddir}/code-browser"/>-->
        <!--<mkdir dir="${builddir}/coverage"/>-->
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <!--<target name="phploc" description="Measure project size using PHPLOC">-->
        <!--<exec executable="phploc">-->
            <!--<arg value="&#45;&#45;log-csv" />-->
            <!--<arg value="${builddir}/logs/phploc.csv" />-->
            <!--<arg path="${sourcedir}" />-->
        <!--</exec>-->
    <!--</target>-->

    <target name="phploc-ci" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/app/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/app/build/logs/phploc.xml"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>
    </target>

    <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
        <exec executable="phpdox">
            <arg value="--file" />
            <arg value="${basedir}/build/phpdox.xml" />
        </exec>
    </target>


    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <!--<target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">-->
        <!--<exec executable="${toolsdir}phpmd">-->
            <!--<arg path="${basedir}/src" />-->
            <!--<arg value="text" />-->
            <!--<arg value="${workspace}/app/phpmd.xml" />-->
        <!--</exec>-->
    <!--</target>-->

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${workspace}/app/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <!--<target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">-->
        <!--<exec executable="phpcs">-->
            <!--<arg value="&#45;&#45;standard=Symfony2" />-->
            <!--<arg path="${sourcedir}" />-->
        <!--</exec>-->
    <!--</target>-->

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <!--<target name="phpdoc" description="Generate API documentation using phpDox">-->
        <!--<exec executable="${toolsdir}phpdoc">-->
            <!--<arg line="-d '${sourcedir}' -t '${builddir}/docs' &#45;&#45;title='Tempo' " />-->
        <!--</exec>-->
    <!--</target>-->

    <!--<target name="phpunit" description="Run unit tests with PHPUnit">-->
        <!--<exec executable="${toolsdir}phpunit" failonerror="true">-->
            <!--<arg value="-c" />-->
            <!--<arg path="${toolsdir}simple-phpunit" />-->
        <!--</exec>-->
    <!--</target>-->

    <!--<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">-->
        <!--<exec executable="${toolsdir}phpcb">-->
            <!--<arg value="&#45;&#45;log" />-->
            <!--<arg path="${builddir}/logs" />-->
            <!--<arg value="&#45;&#45;source" />-->
            <!--<arg path="${sourcedir}" />-->
            <!--<arg value="&#45;&#45;output" />-->
            <!--<arg path="${builddir}/code-browser" />-->
        <!--</exec>-->
    <!--</target>-->

    <target name="composer" description="Installing composer dependencies">
        <exec executable="composer" failonerror="true">
            <arg value="install" />
            <arg value="--dev" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />

            <env key="SYMFONY_ENV" value="test"/>
        </exec>
    </target>

    <target name="vendors" description="Update vendors">
        <exec executable="php" failonerror="true">
            <arg value="composer.json" />
            <arg value="update" />
        </exec>
    </target>

    <target name="parameters" description="Copy parameters">
        <exec executable="cp" failonerror="true">
            <arg path="app/config/parameters.yml.dist" />
            <arg path="app/config/parameters.yml" />
        </exec>
    </target>

</project>